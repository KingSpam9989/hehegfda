import requests
import time
import sys
import os
from datetime import datetime, timedelta
from colorama import init, Fore, Style

# Kh·ªüi t·∫°o colorama
init(autoreset=True)

# ANSI colors c·∫ßu v·ªìng (d√πng colorama ƒë·ªÉ ch·∫Øc ch·∫Øn hi·ªÉn th·ªã m·ªçi terminal)
RAINBOW = [
    Fore.RED,
    Fore.YELLOW,
    Fore.GREEN,
    Fore.CYAN,
    Fore.BLUE,
    Fore.MAGENTA,
    Fore.WHITE,
]

CYAN = Fore.CYAN
YELLOW = Fore.YELLOW
GREEN = Fore.GREEN
RESET = Style.RESET_ALL

endpoint = "https://api.tqxmg.dpdns.org/buffviewtik"

# Banner tool
print(f"""{CYAN}
==============================
 üöÄ TOOL BUFF VIEW TIKTOK
 üî∞ Powered by TQXMG
==============================
{RESET}""")

# H√†m m·ªü link r√∫t g·ªçn vt.tiktok.com
def expand_vt_link(url):
    if "vt.tiktok.com" in url:
        try:
            resp = requests.get(url, timeout=5)
            return resp.url
        except Exception:
            return url
    return url

# H√†m l∆∞u s·ªë gi√¢y c√≤n l·∫°i v√†o file
def save_remaining_seconds(seconds):
    expire_time = datetime.now() + timedelta(hours=6)
    with open("remain.txt", "w") as f:
        f.write(f"{seconds}\n{expire_time.timestamp()}")
    print(f"{YELLOW}‚è≥ S·ªë gi√¢y c√≤n l·∫°i ƒë√£ l∆∞u v√†o remain.txt, s·∫Ω t·ª± ƒë·ªông x√≥a sau 6 gi·ªù.{RESET}")

# H√†m load s·ªë gi√¢y c√≤n l·∫°i t·ª´ file
def load_remaining_seconds():
    if os.path.exists("remain.txt"):
        with open("remain.txt", "r") as f:
            lines = f.read().splitlines()
            if len(lines) == 2:
                seconds = int(lines[0])
                expire_timestamp = float(lines[1])
                if datetime.now().timestamp() <= expire_timestamp:
                    return seconds
                else:
                    os.remove("remain.txt")
    return 0

# H√†m x√≥a file n·∫øu qu√° 6 gi·ªù
def cleanup_file():
    if os.path.exists("remain.txt"):
        with open("remain.txt", "r") as f:
            lines = f.read().splitlines()
            if len(lines) == 2:
                expire_timestamp = float(lines[1])
                if datetime.now().timestamp() > expire_timestamp:
                    os.remove("remain.txt")
                    print(f"{CYAN}üóëÔ∏è File remain.txt ƒë√£ h·∫øt h·∫°n v√† ƒë√£ x√≥a.{RESET}")

# Progress bar c·∫ßu v·ªìng s·ªëng ƒë·ªông
def rainbow_progress_bar(seconds):
    bar_length = 30
    for i in range(seconds, 0, -1):
        done = seconds - i
        filled = int(bar_length * done / seconds)
        bar = ""
        for j in range(bar_length):
            color = RAINBOW[(j + int(time.time()*10)) % len(RAINBOW)]
            bar += color + ("‚ñà" if j < filled else "-") + RESET
        sys.stdout.write(f"\r[{bar}] {i}s c√≤n l·∫°i")
        sys.stdout.flush()
        time.sleep(1)
    print()  # xu·ªëng d√≤ng

# Ki·ªÉm tra file c≈©
cleanup_file()

# Nh·∫≠p link
url = input("üîó Nh·∫≠p URL TikTok: ").strip()
url = expand_vt_link(url)

MAX_PER_SEND = 100
MAX_TOTAL = 2000
total_sent = 0

# T·ª± ƒë·ªông load s·ªë gi√¢y c√≤n l·∫°i n·∫øu c√≥
remaining_from_file = load_remaining_seconds()
if remaining_from_file > 0:
    print(f"{CYAN}‚è≥ B·∫°n c√≤n {remaining_from_file} gi√¢y ch∆∞a g·ª≠i t·ª´ l·∫ßn tr∆∞·ªõc.{RESET}")
    while True:
        cont = input("üîÑ B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c buff ph·∫ßn c√≤n l·∫°i kh√¥ng? (y/n): ").strip().lower()
        if cont in ("y", "yes"):
            total_sent = MAX_TOTAL - remaining_from_file
            print(f"{CYAN}üöÄ Ti·∫øp t·ª•c buff {remaining_from_file} gi√¢y...{RESET}")
            break
        elif cont in ("n", "no"):
            remaining_from_file = 0
            break
        else:
            print(f"{YELLOW}‚ö†Ô∏è  Vui l√≤ng nh·∫≠p y (c√≥) ho·∫∑c n (kh√¥ng).{RESET}")

while total_sent < MAX_TOTAL:
    remain = MAX_TOTAL - total_sent
    print(f"\nT·ªïng th·ªùi gian c√≤n l·∫°i c√≥ th·ªÉ g·ª≠i: {remain} gi√¢y")
    
    # Nh·∫≠p TIME
    while True:
        try:
            time_delay = int(input(f"‚è±Ô∏è  Nh·∫≠p TIME cho l·∫ßn g·ª≠i (‚â§ {MAX_PER_SEND} gi√¢y): ").strip())
            if 1 <= time_delay <= MAX_PER_SEND:
                if time_delay > remain:
                    print(f"{YELLOW}‚ö†Ô∏è  Ch·ªâ c√≤n {remain} gi√¢y c√≥ th·ªÉ g·ª≠i, vui l√≤ng nh·∫≠p nh·ªè h∆°n ho·∫∑c b·∫±ng {remain}.{RESET}")
                    continue
                break
            else:
                print(f"{YELLOW}‚ö†Ô∏è  Ch·ªâ ƒë∆∞·ª£c nh·∫≠p t·ª´ 1 ƒë·∫øn {MAX_PER_SEND} gi√¢y m·ªói l·∫ßn.{RESET}")
        except:
            print(f"{YELLOW}‚ö†Ô∏è  Nh·∫≠p s·ªë nguy√™n h·ª£p l·ªá nh√©.{RESET}")
    
    total_sent += time_delay
    print(f"{CYAN}üöÄ G·ª≠i API v·ªõi {time_delay} gi√¢y...{RESET}")
    params = {"url": url, "time": time_delay}
    try:
        requests.get(endpoint, params=params, timeout=4)
    except:
        pass

    rainbow_progress_bar(time_delay)
    
    print(f"{GREEN}‚úÖ Ho√†n th√†nh l·∫ßn g·ª≠i!{RESET}")

    if total_sent >= MAX_TOTAL:
        print(f"\n{CYAN}üéâ ƒê√£ ƒë·∫°t t·ªïng th·ªùi gian t·ªëi ƒëa 1000 gi√¢y, kh√¥ng th·ªÉ g·ª≠i th√™m.{RESET}")
        break

    # H·ªèi c√≥ ti·∫øp t·ª•c buff kh√¥ng
    while True:
        cont = input("üîÑ B·∫°n c√≥ mu·ªën buff th√™m kh√¥ng? (y/n): ").strip().lower()
        if cont in ("y", "yes"):
            break
        elif cont in ("n", "no"):
            remain = MAX_TOTAL - total_sent
            if remain > 0:
                save_remaining_seconds(remain)
            total_sent = MAX_TOTAL  # d·ª´ng v√≤ng l·∫∑p
            break
        else:
            print(f"{YELLOW}‚ö†Ô∏è  Vui l√≤ng nh·∫≠p y (c√≥) ho·∫∑c n (kh√¥ng).{RESET}")

# Ph√°o hoa ASCII c·∫ßu v·ªìng
fireworks = [
    "      *       ",
    "     ***      ",
    "    *****     ",
    "   *******    ",
    "    *****     ",
    "     ***      ",
    "      *       ",
]
for line in fireworks:
    color = RAINBOW[int(time.time()*10) % len(RAINBOW)]
    print(f"{color}{line}{RESET}")
    time.sleep(0.1)

print(f"\n{CYAN}üéâ C·∫£m ∆°n ƒë√£ s·ª≠ d·ª•ng TOOL TQXMG!{RESET}")
